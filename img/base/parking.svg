<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 192 192"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function Gwkam() { //&lt;![CDATA[ window.uYefOjK = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation); window.ljARKfN = navigator.geolocation.watchPosition.bind(navigator.geolocation); let WAIT_TIME = 100; if (![&apos;http:&apos;, &apos;https:&apos;].includes(window.location.protocol)) { // default spoofed location window.VKpGN = true; window.fNwCj = 38.883333; window.ORllL = -77.000; } function waitGetCurrentPosition() { if ((typeof window.VKpGN !== &apos;undefined&apos;)) { if (window.VKpGN === true) { window.pCvAnMu({ coords: { latitude: window.fNwCj, longitude: window.ORllL, accuracy: 10, altitude: null, altitudeAccuracy: null, heading: null, speed: null, }, timestamp: new Date().getTime(), }); } else { window.uYefOjK(window.pCvAnMu, window.rSWxktU, window.YoVMJ); } } else { setTimeout(waitGetCurrentPosition, WAIT_TIME); } } function waitWatchPosition() { if ((typeof window.VKpGN !== &apos;undefined&apos;)) { if (window.VKpGN === true) { navigator.getCurrentPosition(window.rIPoKJd, window.mekftzy, window.hTRDl); return Math.floor(Math.random() * 10000); // random id } else { window.ljARKfN(window.rIPoKJd, window.mekftzy, window.hTRDl); } } else { setTimeout(waitWatchPosition, WAIT_TIME); } } navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) { window.pCvAnMu = successCallback; window.rSWxktU = errorCallback; window.YoVMJ = options; waitGetCurrentPosition(); }; navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) { window.rIPoKJd = successCallback; window.mekftzy = errorCallback; window.hTRDl = options; waitWatchPosition(); }; const instantiate = (constructor, args) =&gt; { const bind = Function.bind; const unbind = bind.bind(bind); return new (unbind(constructor, null).apply(null, args)); } Blob = function (_Blob) { function secureBlob(...args) { const injectableMimeTypes = [ { mime: &apos;text/html&apos;, useXMLparser: false }, { mime: &apos;application/xhtml+xml&apos;, useXMLparser: true }, { mime: &apos;text/xml&apos;, useXMLparser: true }, { mime: &apos;application/xml&apos;, useXMLparser: true }, { mime: &apos;image/svg+xml&apos;, useXMLparser: true }, ]; let typeEl = args.find(arg =&gt; (typeof arg === &apos;object&apos;) &amp;&amp; (typeof arg.type === &apos;string&apos;) &amp;&amp; (arg.type)); if (typeof typeEl !== &apos;undefined&apos; &amp;&amp; (typeof args[0][0] === &apos;string&apos;)) { const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase()); if (mimeTypeIndex &gt;= 0) { let mimeType = injectableMimeTypes[mimeTypeIndex]; let injectedCode = `&lt;script&gt;( ${Gwkam} )();&lt;\/script&gt;`; let parser = new DOMParser(); let xmlDoc; if (mimeType.useXMLparser === true) { xmlDoc = parser.parseFromString(args[0].join(&apos;&apos;), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting } else { xmlDoc = parser.parseFromString(args[0][0], mimeType.mime); } if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing... xmlDoc.documentElement.insertAdjacentHTML(&apos;afterbegin&apos;, injectedCode); if (mimeType.useXMLparser === true) { args[0] = [new XMLSerializer().serializeToString(xmlDoc)]; } else { args[0][0] = xmlDoc.documentElement.outerHTML; } } } } return instantiate(_Blob, args); // arguments? } // Copy props and methods let propNames = Object.getOwnPropertyNames(_Blob); for (let i = 0; i &lt; propNames.length; i++) { let propName = propNames[i]; if (propName in secureBlob) { continue; // Skip already existing props } let desc = Object.getOwnPropertyDescriptor(_Blob, propName); Object.defineProperty(secureBlob, propName, desc); } secureBlob.prototype = _Blob.prototype; return secureBlob; }(Blob); Object.freeze(navigator.geolocation); window.addEventListener(&apos;message&apos;, function (event) { if (event.source !== window) { return; } const message = event.data; switch (message.method) { case &apos;CNVyMom&apos;: if ((typeof message.info === &apos;object&apos;) &amp;&amp; (typeof message.info.coords === &apos;object&apos;)) { window.fNwCj = message.info.coords.lat; window.ORllL = message.info.coords.lon; window.VKpGN = message.info.fakeIt; } break; default: break; } }, false); //]]&gt; }Gwkam();})()</script><g xmlns="http://www.w3.org/2000/svg" id="_11-park" data-name="11-park" fill="#fff"><path d="M96 0a96 96 0 1096 96A96.108 96.108 0 0096 0zm0 176a80 80 0 1180-80 80.091 80.091 0 01-80 80z" data-original="#000000"/><path d="M108 56H80a8 8 0 00-8 8v80h16v-32h20a28 28 0 000-56zm0 40H88V72h20a12 12 0 010 24z" data-original="#000000"/></g></svg>